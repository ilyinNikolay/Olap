import React, { useEffect, useState } from 'react';
import Highcharts from 'highcharts/highmaps';
import HighchartsReact from 'highcharts-react-official';
import geoJsonRussia from './rus_simple_highcharts.geo.json'; // GeoJSON для России
import geoJsonWorld from './world_geo.json'; // GeoJSON для мира

Highcharts.setOptions({
    credits: {
        enabled: false,
    },
});

const MapComponent = () => {
    const [yourDataArray, setYourDataArray] = useState([]);
    const [colorStops, setColorStops] = useState(3); // Начальное количество цветов
    const [isWorldMap, setIsWorldMap] = useState(false); // Состояние для выбора карты

    // Состояния для цветов палитры
    const [lowColor, setLowColor] = useState('#FF0000');
    const [midColor, setMidColor] = useState('#FFA500');
    const [highColor, setHighColor] = useState('#008000');

    useEffect(() => {
        const fetchGeoJsonData = async () => {
            const geoJson = isWorldMap ? JSON.parse(JSON.stringify(geoJsonWorld)) : JSON.parse(JSON.stringify(geoJsonRussia));
            let dataArray = geoJson.features.map((feature) => ({
                'hc-key': feature.properties['hc-key'],
                value: Math.random(),
            }));

            if (!isWorldMap) { 
                const angle = -15;
                const radians = angle * (Math.PI / 180);
                const cos = Math.cos(radians);
                const sin = Math.sin(radians);

                geoJson.features.forEach((feature) => {
                    feature.geometry.coordinates.forEach((polygon) => {
                        polygon.forEach((coords) => {
                            coords.forEach((point) => {
                                const x = point[0] * cos - point[1] * sin;
                                const y = point[0] * sin + point[1] * cos;
                                point[0] = x;
                                point[1] = y;
                            });
                        });
                    });
                });
            }

            setYourDataArray(dataArray);
        };

        fetchGeoJsonData();
    }, [isWorldMap]);

    const getColorAxisStops = () => {
        return [
            [0, lowColor],
            [0.5, midColor],
            [1, highColor],
        ];
    };

    const createMapOptions = () => {
        const geoJson = isWorldMap ? geoJsonWorld : geoJsonRussia;
        return {
            chart: {
                map: geoJson,
                accessibility: {
                    enabled: false,
                },
                width: 1200,
                height: 800,
            },
            title: {
                text: isWorldMap ? 'Карта Мира' : 'Карта Регионов России',
            },
            legend: {
                enabled: true,
            },
            colorAxis: {
                min: 0,
                max: 1,
                stops: getColorAxisStops(),
            },
            series: [{
                data: yourDataArray,
                mapData: geoJson,
                joinBy: 'hc-key',
                name: 'Значение по регионам',
                states: {
                    hover: {
                        color: '#BADA55',
                    },
                },
                dataLabels: {
                    enabled: false,
                },
            }],
        };
    };

    return (
        <div style={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            height: '100vh',
            padding: '20px',
        }}>
            <div style={{ marginBottom: '20px' }}>
                <button onClick={() => setIsWorldMap(false)}>Карта России</button>
                <button onClick={() => setIsWorldMap(true)}>Карта Мира</button>
                <button onClick={() => setColorStops(2)}>2 Цвета</button>
                <button onClick={() => setColorStops(3)}>3 Цвета</button>

                {/* Выбор цветов */}
                <div style={{ marginTop: '10px' }}>
                    <label>Низкий цвет: </label>
                    <input 
                        type="color" 
                        value={lowColor} 
                        onChange={(e) => setLowColor(e.target.value)} 
                    />
                    <label>Средний цвет: </label>
                    <input 
                        type="color" 
                        value={midColor} 
                        onChange={(e) => setMidColor(e.target.value)} 
                        disabled={colorStops === 2} // Отключаем для двух цветов
                    />
                    <label>Высокий цвет: </label>
                    <input 
                        type="color" 
                        value={highColor} 
                        onChange={(e) => setHighColor(e.target.value)} 
                    />
                </div>
            </div>
            {yourDataArray.length > 0 && (
                <HighchartsReact
                    highcharts={Highcharts}
                    constructorType={'mapChart'}
                    options={createMapOptions()}
                />
            )}
        </div>
    );
};

export default MapComponent;
